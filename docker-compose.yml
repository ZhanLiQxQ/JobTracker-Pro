
services:
  # ===============================================
  # == Application Services (from docker-compose.prod.yml) ==
  # ===============================================
  backend:
    build:
      context: ./backend
    restart: always
    environment:
      # All sensitive information will be read from .env file
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - SPRING_DATASOURCE_URL=${DB_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis  # Use service name in Docker environment
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - APP_INTERNAL_API_KEY=${APP_INTERNAL_API_KEY}
      - AI_SERVICE_URL=http://ai_service:5000  # AI service URL configuration
    depends_on:
      db: # Depends on database service below
        condition: service_healthy
      redis: # Depends on Redis service
        condition: service_healthy
      ai_service: # Depends on AI service
        condition: service_started

  frontend:
    build:
      context: ./frontend
    restart: always
    ports:
      - "80:80" # Map host port 80 to Nginx port 80
    depends_on:
      - backend

  ai_service:
    build:
      context: ./ai_service
    restart: always
    environment:
      - JAVA_BACKEND_INTAKE_URL=http://backend:8080/api/internal/jobs/batch-intake
      - JAVA_BACKEND_INTERNAL_JOBS_URL=http://backend:8080/api/internal/jobs
      - INTERNAL_API_KEY=${APP_INTERNAL_API_KEY}

  # ========================================================
  # == Dependency Services (from docker-compose.yml, for local testing only) ==
  # ========================================================
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: jobtracker
    ports:
      - "5432:5432" # Map to local for easy database tool connection
    volumes:
      - pgdata_local:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d jobtracker"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379" # Map to local for easy connection
    volumes:
      - redisdata_local:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: redis-server --save 60 1 --loglevel warning

volumes:
  pgdata_local:
  redisdata_local: